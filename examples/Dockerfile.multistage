# Multi-stage Dockerfile example for testing shmocker multi-stage build functionality
# This demonstrates building a Go application with multi-stage builds

# Stage 1: Build stage
FROM golang:1.21-alpine AS builder

# Set build arguments
ARG VERSION=1.0.0
ARG CGO_ENABLED=0
ARG GOOS=linux

# Install build dependencies
RUN apk add --no-cache git ca-certificates

# Set working directory
WORKDIR /src

# Copy go mod files first for better caching
COPY go.mod go.sum ./
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=${CGO_ENABLED} GOOS=${GOOS} go build \
    -ldflags="-w -s -X main.version=${VERSION}" \
    -o /app/server ./cmd/server

# Build additional tools
RUN CGO_ENABLED=${CGO_ENABLED} GOOS=${GOOS} go build \
    -ldflags="-w -s" \
    -o /app/migrate ./cmd/migrate

# Stage 2: Runtime stage
FROM alpine:3.18 AS runtime

# Install runtime dependencies
RUN apk add --no-cache \
    ca-certificates \
    tzdata \
    curl

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy binaries from builder stage
COPY --from=builder /app/server /app/server
COPY --from=builder /app/migrate /app/migrate

# Copy configuration files (if any)
COPY --from=builder /src/config/ /app/config/

# Create necessary directories
RUN mkdir -p /app/data /app/logs && \
    chown -R appuser:appgroup /app

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Set environment variables
ENV APP_ENV=production \
    LOG_LEVEL=info

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=10s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default command
CMD ["/app/server"]

# Stage 3: Debug stage (optional, inherits from runtime)
FROM runtime AS debug

# Switch back to root to install debug tools
USER root

# Install debugging tools
RUN apk add --no-cache \
    strace \
    gdb \
    htop \
    vim

# Copy debug binary with symbols
COPY --from=builder /src/server-debug /app/server-debug

# Switch back to app user
USER appuser

# Override default command for debugging
CMD ["/app/server-debug", "-debug"]